//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_Project/Content/InputActions/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Test
{
    public partial class @Input : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Input()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""LandMap"",
            ""id"": ""b4886a77-cc01-4e22-9c2d-b58a1af47817"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f8df0408-4d96-4f04-b3ea-89512a60383f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""00376731-3d44-442d-925c-9277d0b2d1cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""210cde08-099a-4601-9d64-7fc017f4d72e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""173b262c-0532-4001-ac7e-c1ff2a2f8163"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""19865f57-efa5-4c30-a684-9c3b36728358"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""027d79d1-ff56-4513-9356-521ac9b1549b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""725f9ae6-e708-4cce-b445-f0cb7ee40156"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ae9cc857-2f25-4545-ad4c-a59a5f362cac"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // LandMap
            m_LandMap = asset.FindActionMap("LandMap", throwIfNotFound: true);
            m_LandMap_Movement = m_LandMap.FindAction("Movement", throwIfNotFound: true);
            m_LandMap_Interact = m_LandMap.FindAction("Interact", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // LandMap
        private readonly InputActionMap m_LandMap;
        private ILandMapActions m_LandMapActionsCallbackInterface;
        private readonly InputAction m_LandMap_Movement;
        private readonly InputAction m_LandMap_Interact;
        public struct LandMapActions
        {
            private @Input m_Wrapper;
            public LandMapActions(@Input wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_LandMap_Movement;
            public InputAction @Interact => m_Wrapper.m_LandMap_Interact;
            public InputActionMap Get() { return m_Wrapper.m_LandMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LandMapActions set) { return set.Get(); }
            public void SetCallbacks(ILandMapActions instance)
            {
                if (m_Wrapper.m_LandMapActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_LandMapActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_LandMapActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_LandMapActionsCallbackInterface.OnMovement;
                    @Interact.started -= m_Wrapper.m_LandMapActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_LandMapActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_LandMapActionsCallbackInterface.OnInteract;
                }
                m_Wrapper.m_LandMapActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                }
            }
        }
        public LandMapActions @LandMap => new LandMapActions(this);
        public interface ILandMapActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
        }
    }
}
